import { expect, test } from 'vitest'

import * as solid from './index.js'

test('exports', () => {
  expect(Object.keys(solid)).toMatchInlineSnapshot(`
    [
      "WagmiContext",
      "WagmiProvider",
      "Context",
      "WagmiConfig",
      "BaseError",
      "WagmiProviderNotFoundError",
      "createAccount",
      "createAccountEffect",
      "createBalance",
      "createBlock",
      "createBlockNumber",
      "createBlockTransactionCount",
      "createBytecode",
      "createCall",
      "createChainId",
      "createClient",
      "createConfig",
      "createConnect",
      "createConnections",
      "createConnectors",
      "createConnectorClient",
      "createDisconnect",
      "createEnsAddress",
      "createEnsAvatar",
      "createEnsName",
      "createEnsResolver",
      "createEnsText",
      "createEstimateFeesPerGas",
      "createFeeData",
      "createEstimateGas",
      "createEstimateMaxPriorityFeePerGas",
      "createFeeHistory",
      "createGasPrice",
      "createInfiniteReadContracts",
      "createContractInfiniteReads",
      "createPrepareTransactionRequest",
      "createProof",
      "createPublicClient",
      "createReadContract",
      "createContractRead",
      "createReadContracts",
      "createContractReads",
      "createReconnect",
      "createSendTransaction",
      "createSignMessage",
      "createSignTypedData",
      "createSimulateContract",
      "createStorageAt",
      "createSwitchAccount",
      "createSwitchChain",
      "createToken",
      "createTransaction",
      "createTransactionConfirmations",
      "createTransactionCount",
      "createTransactionReceipt",
      "createVerifyMessage",
      "createVerifyTypedData",
      "createWalletClient",
      "createWaitForTransactionReceipt",
      "createWatchBlocks",
      "createWatchBlockNumber",
      "createWatchContractEvent",
      "createWatchPendingTransactions",
      "createWriteContract",
      "createContractWrite",
      "Hydrate",
      "createConfig",
      "createConnector",
      "ChainNotConfiguredError",
      "ConnectorAlreadyConnectedError",
      "ConnectorNotFoundError",
      "ConnectorAccountNotFoundError",
      "ProviderNotFoundError",
      "SwitchChainNotSupportedError",
      "createStorage",
      "noopStorage",
      "custom",
      "fallback",
      "http",
      "webSocket",
      "unstable_connector",
      "cookieStorage",
      "cookieToInitialState",
      "deepEqual",
      "deserialize",
      "normalizeChainId",
      "parseCookie",
      "serialize",
      "version",
    ]
  `)
})
