// Vitest Snapshot v1

exports[`react > run > isTypeScript > false 1`] = `
"import {
  useContract,
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
  useContractEvent,
} from 'wagmi'

/**
 * Wraps {@link useContract} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmi(config = {}) {
  return useContract({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmiRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"balanceOf\\"\`.
 */
export function useWagmiBalanceOfRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"getApproved\\"\`.
 */
export function useWagmiGetApprovedRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"isApprovedForAll\\"\`.
 */
export function useWagmiIsApprovedForAllRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"name\\"\`.
 */
export function useWagmiNameRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"ownerOf\\"\`.
 */
export function useWagmiOwnerOfRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"supportsInterface\\"\`.
 */
export function useWagmiSupportsInterfaceRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"symbol\\"\`.
 */
export function useWagmiSymbolRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"tokenURI\\"\`.
 */
export function useWagmiTokenUriRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"totalSupply\\"\`.
 */
export function useWagmiTotalSupplyRead(config = {}) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmiWrite(config = {}) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"approve\\"\`.
 */
export function useWagmiApproveWrite(config = {}) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"mint\\"\`.
 */
export function useWagmiMintWrite(config = {}) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"safeTransferFrom\\"\`.
 */
export function useWagmiSafeTransferFromWrite(config = {}) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"setApprovalForAll\\"\`.
 */
export function useWagmiSetApprovalForAllWrite(config = {}) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"transferFrom\\"\`.
 */
export function useWagmiTransferFromWrite(config = {}) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi}.
 */
export function usePrepareWagmiWrite(config = {}) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"approve\\"\`.
 */
export function usePrepareWagmiApproveWrite(config = {}) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"mint\\"\`.
 */
export function usePrepareWagmiMintWrite(config = {}) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"safeTransferFrom\\"\`.
 */
export function usePrepareWagmiSafeTransferFromWrite(config = {}) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"setApprovalForAll\\"\`.
 */
export function usePrepareWagmiSetApprovalForAllWrite(config = {}) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"transferFrom\\"\`.
 */
export function usePrepareWagmiTransferFromWrite(config = {}) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmiEvent(config = {}) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi} and \`eventName\` set to \`\\"Approval\\"\`.
 */
export function useWagmiApprovalEvent(config = {}) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi} and \`eventName\` set to \`\\"ApprovalForAll\\"\`.
 */
export function useWagmiApprovalForAllEvent(config = {}) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi} and \`eventName\` set to \`\\"Transfer\\"\`.
 */
export function useWagmiTransferEvent(config = {}) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}
"
`;

exports[`react > run > isTypeScript > true 1`] = `
"import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'

/**
 * Wraps {@link useContract} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmi(
  config: Omit<UseContractConfig, 'abi' | 'address'> = {} as any,
) {
  return useContract({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  })
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmiRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = string,
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"balanceOf\\"\`.
 */
export function useWagmiBalanceOfRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'balanceOf',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"getApproved\\"\`.
 */
export function useWagmiGetApprovedRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'getApproved',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"isApprovedForAll\\"\`.
 */
export function useWagmiIsApprovedForAllRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'isApprovedForAll',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"name\\"\`.
 */
export function useWagmiNameRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'name',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"ownerOf\\"\`.
 */
export function useWagmiOwnerOfRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'ownerOf',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"supportsInterface\\"\`.
 */
export function useWagmiSupportsInterfaceRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'supportsInterface',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"symbol\\"\`.
 */
export function useWagmiSymbolRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'symbol',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"tokenURI\\"\`.
 */
export function useWagmiTokenUriRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'tokenURI',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractRead} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"totalSupply\\"\`.
 */
export function useWagmiTotalSupplyRead<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'totalSupply',
>(
  config: Omit<
    UseContractReadConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmiWrite<
  TMode extends 'prepared' | 'recklesslyUnprepared',
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = string,
>(
  config: Omit<
    UseContractWriteConfig<TMode, TAbi, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  } as UseContractWriteConfig<TMode, TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"approve\\"\`.
 */
export function useWagmiApproveWrite<
  TMode extends 'prepared' | 'recklesslyUnprepared',
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'approve',
>(
  config: Omit<
    UseContractWriteConfig<TMode, TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'approve',
    ...config,
  } as UseContractWriteConfig<TMode, TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"mint\\"\`.
 */
export function useWagmiMintWrite<
  TMode extends 'prepared' | 'recklesslyUnprepared',
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'mint',
>(
  config: Omit<
    UseContractWriteConfig<TMode, TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'mint',
    ...config,
  } as UseContractWriteConfig<TMode, TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"safeTransferFrom\\"\`.
 */
export function useWagmiSafeTransferFromWrite<
  TMode extends 'prepared' | 'recklesslyUnprepared',
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'safeTransferFrom',
>(
  config: Omit<
    UseContractWriteConfig<TMode, TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'safeTransferFrom',
    ...config,
  } as UseContractWriteConfig<TMode, TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"setApprovalForAll\\"\`.
 */
export function useWagmiSetApprovalForAllWrite<
  TMode extends 'prepared' | 'recklesslyUnprepared',
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'setApprovalForAll',
>(
  config: Omit<
    UseContractWriteConfig<TMode, TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'setApprovalForAll',
    ...config,
  } as UseContractWriteConfig<TMode, TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"transferFrom\\"\`.
 */
export function useWagmiTransferFromWrite<
  TMode extends 'prepared' | 'recklesslyUnprepared',
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'transferFrom',
>(
  config: Omit<
    UseContractWriteConfig<TMode, TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'transferFrom',
    ...config,
  } as UseContractWriteConfig<TMode, TAbi, TFunctionName>)
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi}.
 */
export function usePrepareWagmiWrite<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  } as UsePrepareContractWriteConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"approve\\"\`.
 */
export function usePrepareWagmiApproveWrite<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'approve',
>(
  config: Omit<
    UsePrepareContractWriteConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"mint\\"\`.
 */
export function usePrepareWagmiMintWrite<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'mint',
>(
  config: Omit<
    UsePrepareContractWriteConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"safeTransferFrom\\"\`.
 */
export function usePrepareWagmiSafeTransferFromWrite<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'safeTransferFrom',
>(
  config: Omit<
    UsePrepareContractWriteConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"setApprovalForAll\\"\`.
 */
export function usePrepareWagmiSetApprovalForAllWrite<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'setApprovalForAll',
>(
  config: Omit<
    UsePrepareContractWriteConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link usePrepareContractWrite} with \`abi\` set to {@link WagmiAbi} and \`functionName\` set to \`\\"transferFrom\\"\`.
 */
export function usePrepareWagmiTransferFromWrite<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TFunctionName extends string = 'transferFrom',
>(
  config: Omit<
    UsePrepareContractWriteConfig<TAbi, TFunctionName>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: WagmiAbi,
    address: WagmiAddress,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<TAbi, TFunctionName>)
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi}.
 */
export function useWagmiEvent<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TEventName extends string = string,
>(
  config: Omit<
    UseContractEventConfig<TAbi, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    ...config,
  } as UseContractEventConfig<TAbi, TEventName>)
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi} and \`eventName\` set to \`\\"Approval\\"\`.
 */
export function useWagmiApprovalEvent<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TEventName extends string = 'Approval',
>(
  config: Omit<
    UseContractEventConfig<TAbi, TEventName>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<TAbi, TEventName>)
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi} and \`eventName\` set to \`\\"ApprovalForAll\\"\`.
 */
export function useWagmiApprovalForAllEvent<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TEventName extends string = 'ApprovalForAll',
>(
  config: Omit<
    UseContractEventConfig<TAbi, TEventName>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<TAbi, TEventName>)
}

/**
 * Wraps {@link useContractEvent} with \`abi\` set to {@link WagmiAbi} and \`eventName\` set to \`\\"Transfer\\"\`.
 */
export function useWagmiTransferEvent<
  TAbi extends readonly unknown[] = typeof WagmiAbi,
  TEventName extends string = 'Transfer',
>(
  config: Omit<
    UseContractEventConfig<TAbi, TEventName>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: WagmiAbi,
    address: WagmiAddress,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<TAbi, TEventName>)
}
"
`;
